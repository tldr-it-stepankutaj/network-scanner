name: Build & Release

on:
  push:
    tags:
      - 'v*'
jobs:
  build-linux:
    runs-on: ubuntu-22.04
    name: Build on Linux

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake g++ dpkg-dev rpm ruby ruby-dev rubygems build-essential
          sudo gem install --no-document fpm

      - name: Configure & build
        run: |
          cmake -B build -DCMAKE_INSTALL_PREFIX=/usr
          cmake --build build --parallel
          cmake --install build --prefix dist/usr

      - name: Create tar.gz
        run: |
          tar -czvf network-scanner-linux.tar.gz -C dist .

      - name: Create DEB package
        run: |
          mkdir -p pkg-deb/DEBIAN
          echo "Package: network-scanner
          Version: ${GITHUB_REF_NAME#v}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: Stepan Kutaj <stepan.kutaj@tldr-it.com>
          Description: Fast ICMP/TCP ping sweep scanner" > pkg-deb/DEBIAN/control
          cp -r dist/* pkg-deb/
          dpkg-deb --build pkg-deb network-scanner-${GITHUB_REF_NAME#v}.deb

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build RPM in Rocky Linux container
        run: |
          # Create a Dockerfile for building in Rocky Linux 8
          cat > Dockerfile.rpm << EOF
          FROM rockylinux:8
          
          # Install build dependencies
          RUN dnf -y install epel-release && \
              dnf -y install cmake gcc-c++ make rpm-build libstdc++-static
          
          # Create RPM structure
          RUN mkdir -p /root/rpmbuild/{SOURCES,SPECS,BUILD,RPMS,SRPMS}
          
          # Copy the prebuilt binaries directly
          COPY dist/usr /root/rpmbuild/BUILD/usr
          
          # Create RPM spec file
          RUN echo "Name: network-scanner" > /root/rpmbuild/SPECS/network-scanner.spec
          RUN echo "Version: ${GITHUB_REF_NAME#v}" >> /root/rpmbuild/SPECS/network-scanner.spec
          RUN echo "Release: 1%{?dist}" >> /root/rpmbuild/SPECS/network-scanner.spec
          RUN echo "Summary: Fast ICMP/TCP ping sweep scanner" >> /root/rpmbuild/SPECS/network-scanner.spec
          RUN echo "License: MIT" >> /root/rpmbuild/SPECS/network-scanner.spec
          RUN echo "BuildArch: x86_64" >> /root/rpmbuild/SPECS/network-scanner.spec
          RUN echo "AutoReq: no" >> /root/rpmbuild/SPECS/network-scanner.spec
          RUN echo "" >> /root/rpmbuild/SPECS/network-scanner.spec
          RUN echo "%description" >> /root/rpmbuild/SPECS/network-scanner.spec
          RUN echo "Fast parallel ICMP/TCP ping scanner for large network ranges" >> /root/rpmbuild/SPECS/network-scanner.spec
          RUN echo "" >> /root/rpmbuild/SPECS/network-scanner.spec
          RUN echo "%files" >> /root/rpmbuild/SPECS/network-scanner.spec
          RUN echo "%defattr(-,root,root,-)" >> /root/rpmbuild/SPECS/network-scanner.spec
          RUN echo "/usr/bin/network-scanner" >> /root/rpmbuild/SPECS/network-scanner.spec
          RUN echo "/usr/share/man/man1/network-scanner.1" >> /root/rpmbuild/SPECS/network-scanner.spec
          RUN echo "/usr/share/bash-completion/completions/network-scanner.bash" >> /root/rpmbuild/SPECS/network-scanner.spec
          RUN echo "/usr/share/zsh/site-functions/_network-scanner" >> /root/rpmbuild/SPECS/network-scanner.spec
          
          # Build RPM
          RUN rpmbuild -bb /root/rpmbuild/SPECS/network-scanner.spec
          EOF
          
          # Build the Docker image
          docker build -t network-scanner-rpm-builder -f Dockerfile.rpm .
          
          # Copy the RPM from the container
          docker run --rm -v $(pwd):/output network-scanner-rpm-builder sh -c "cp /root/rpmbuild/RPMS/x86_64/network-scanner-*.rpm /output/"
          
          # Rename the RPM file to match our naming convention
          mv network-scanner-*.rpm network-scanner-${GITHUB_REF_NAME#v}.rpm

      - uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-linux
          path: |
            network-scanner-linux.tar.gz
            *.deb
            *.rpm

  release:
    name: Create GitHub Release
    needs:
      - build-linux
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-linux
          path: artifacts

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: artifacts/*
          body: |
            ðŸš€ New release ${{ github.ref_name }} of network-scanner
            - Includes Linux binaries
            - DEB & RPM packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}